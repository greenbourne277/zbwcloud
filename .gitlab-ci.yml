workflow:
  rules:
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push" # avoids duplicate pipelines when a merge request is open
      when: never
    - if: $CI_COMMIT_BRANCH == null || $CI_OPEN_MERGE_REQUESTS == null || $CI_PIPELINE_SOURCE != "push"

variables:
  VAULT_OPENJDK_IMAGE: "swr.eu-nl.otc.t-systems.com/zbw-tools-nl/vault-openjdk:1.0.2"

default:
  image: eclipse-temurin:17.0.11_9-jdk

stages:
  - build
  - test
  - push

before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle

buildDockerfileImages:
  stage: build
  rules:
    - if: $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000" && $CI_PIPELINE_SOURCE == "push" # first statement evaluates as true for first pipeline run on a new branch, and for merge requests
      changes:
        compare_to: 'refs/heads/main'
        paths:
          - docker/**/Dockerfile
    - if: $CI_COMMIT_BEFORE_SHA != "0000000000000000000000000000000000000000" || $CI_PIPELINE_SOURCE != "push"
      changes:
        paths:
          - docker/**/Dockerfile
  image: docker:25.0.5-git
  tags:
    - dockersocket
  script:
    - echo $CI_COMMIT_SHA
    - echo $CI_COMMIT_BEFORE_SHA
    - echo $CI_PIPELINE_SOURCE
    - echo $CI_COMMIT_BRANCH
    - echo $CI_DEFAULT_BRANCH
    - echo $CI_OPEN_MERGE_REQUESTS
    - echo $CI_MERGE_REQUEST_DIFF_BASE_SHA
    - >
      if [[ $CI_OPEN_MERGE_REQUESTS ]]
        then export CHANGED_DOCKERFILES=$(git diff --no-commit-id --name-only ${CI_MERGE_REQUEST_DIFF_BASE_SHA} | grep Dockerfile)  # case merge request pipeline
        elif [[ $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH ]]
        then export CHANGED_DOCKERFILES=$(git diff --no-commit-id --name-only HEAD^1 | grep Dockerfile)  # case merge pipeline
        else export CHANGED_DOCKERFILES=$(git diff-tree --no-commit-id --name-only -r ${CI_COMMIT_SHA} | grep Dockerfile)  # case push pipeline
      fi
    - echo $CHANGED_DOCKERFILES
    - >
      for dockerfile in $CHANGED_DOCKERFILES; do
        echo $dockerfile
        export IMAGE_VERSION_TAG=$(sed -n 's/LABEL IMAGE_VERSION_TAG.*= *//p' $dockerfile | awk '{print $1}')
        export IMAGE_NAME=$(sed -n 's/LABEL IMAGE_NAME.*= *//p' $dockerfile | awk '{print $1}')
        export OTC_STAGE=$(sed -n 's/LABEL OTC_STAGE.*= *//p' $dockerfile | awk '{print $1}')
        docker build -t $IMAGE_NAME $(dirname $dockerfile)
        echo docker tag $IMAGE_NAME swr.eu-nl.otc.t-systems.com/$OTC_STAGE/$IMAGE_NAME:$IMAGE_VERSION_TAG
        docker tag $IMAGE_NAME swr.eu-nl.otc.t-systems.com/$OTC_STAGE/$IMAGE_NAME:$IMAGE_VERSION_TAG
        echo "docker image ls"
        docker image ls
      done

pushDockerfileImages:
  stage: push
  needs: ["buildDockerfileImages"]
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - docker/**/Dockerfile
  image: swr.eu-nl.otc.t-systems.com/zbw-tools-nl/vault-docker:1.0.4
  variables:
    VAULT_ROLE_ID: ci-zbw-dev
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://vault-nl.zbw.eu
  tags:
    - dockersocket
  script:
    - export VAULT_ADDR=https://vault-nl.zbw.eu
    - export VAULT_TOKEN="$(vault write -field=token auth/jwt-cloud2/login role=$VAULT_ROLE_ID jwt=$VAULT_ID_TOKEN)"
    - mkdir -p ~/.docker
    - vault kv get -field=config secret/otc-credentials/docker  | base64 -d >> ~/.docker/config.json
    - export CHANGED_DOCKERFILES=$(git diff --no-commit-id --name-only HEAD^1 | grep Dockerfile) # gives changed Dockerfiles, not successfully built Dockerfiles
    - echo $CHANGED_DOCKERFILES
    - >
      for dockerfile in $CHANGED_DOCKERFILES; do
        echo $dockerfile
        export IMAGE_VERSION_TAG=$(sed -n 's/LABEL IMAGE_VERSION_TAG.*= *//p' $dockerfile | awk '{print $1}')
        export IMAGE_NAME=$(sed -n 's/LABEL IMAGE_NAME.*= *//p' $dockerfile | awk '{print $1}')
        export OTC_STAGE=$(sed -n 's/LABEL OTC_STAGE.*= *//p' $dockerfile | awk '{print $1}')
        echo "docker image ls"
        docker image ls
        echo docker push swr.eu-nl.otc.t-systems.com/$OTC_STAGE/$IMAGE_NAME:$IMAGE_VERSION_TAG
        docker push swr.eu-nl.otc.t-systems.com/$OTC_STAGE/$IMAGE_NAME:$IMAGE_VERSION_TAG
      done
      
build:
  stage: build
  rules:
    - if: $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000" && $CI_PIPELINE_SOURCE == "push" # first statement evaluates as true for first pipeline run on a new branch, and for merge requests
      changes:
        compare_to: 'refs/heads/main'
        paths:
          - app/**/*
          - buildSrc/**/*
          - job/**/*
    - if: $CI_COMMIT_BEFORE_SHA != "0000000000000000000000000000000000000000" || $CI_PIPELINE_SOURCE != "push"
      changes:
        paths:
          - app/**/*
          - buildSrc/**/*
          - job/**/*
  tags:
    - dockersocket
  script:
    - ./gradlew assemble --parallel
  artifacts:
    paths:
      - build/libs/*.jar
    expire_in: 1 week

test:
  stage: test
  needs: ["build"]
  rules:
    - if: $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000" && $CI_PIPELINE_SOURCE == "push" # first statement evaluates as true for first pipeline run on a new branch, and for merge requests
      changes:
        compare_to: 'refs/heads/main'
        paths:
          - app/**/*
          - buildSrc/**/*
          - job/**/*
    - if: $CI_COMMIT_BEFORE_SHA != "0000000000000000000000000000000000000000" || $CI_PIPELINE_SOURCE != "push"
      changes:
        paths:
          - app/**/*
          - buildSrc/**/*
          - job/**/*
  dependencies:
    - build
  tags:
    - privileged
  script:
    - ./gradlew check --parallel
  artifacts:
    when: always
    reports:
      junit: app/*/**/TEST-*.xml

pushLoriImage:
  stage: push
  needs: ["test"]
  image: $VAULT_OPENJDK_IMAGE
  variables:
    VAULT_ROLE_ID: ci-zbw-dev
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - app/lori/**/*
  dependencies:
    - test
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://vault-nl.zbw.eu
  tags:
    - dockersocket
  script:
    - export VAULT_ADDR=https://vault-nl.zbw.eu
    - export VAULT_TOKEN="$(vault write -field=token auth/jwt-cloud2/login role=$VAULT_ROLE_ID jwt=$VAULT_ID_TOKEN)"
    - mkdir -p ~/.docker
    - vault kv get -field=config secret/otc-credentials/docker  | base64 -d >> ~/.docker/config.json
    - ./gradlew :app:lori:server:jib
    - rm -rf ~/.docker/config.json

pushLoriImportJob:
  stage: push
  needs: ["test"]
  image: $VAULT_OPENJDK_IMAGE
  variables:
    VAULT_ROLE_ID: ci-zbw-dev
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - job/lori_import/**/*
  dependencies:
    - test
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://vault-nl.zbw.eu
  tags:
    - dockersocket
  script:
    - export VAULT_ADDR=https://vault-nl.zbw.eu
    - export VAULT_TOKEN="$(vault write -field=token auth/jwt-cloud2/login role=$VAULT_ROLE_ID jwt=$VAULT_ID_TOKEN)"
    - mkdir -p ~/.docker
    - vault kv get -field=config secret/otc-credentials/docker  | base64 -d >> ~/.docker/config.json
    - ./gradlew :job:lori_import:jib
    - rm -rf ~/.docker/config.json

pushTemplateApplyJob:
  stage: push
  needs: ["test"]
  image: $VAULT_OPENJDK_IMAGE
  variables:
    VAULT_ROLE_ID: ci-zbw-dev
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - job/template_apply/**/*
  dependencies:
    - test
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://vault-nl.zbw.eu
  tags:
    - dockersocket
  script:
    - export VAULT_ADDR=https://vault-nl.zbw.eu
    - export VAULT_TOKEN="$(vault write -field=token auth/jwt-cloud2/login role=$VAULT_ROLE_ID jwt=$VAULT_ID_TOKEN)"
    - mkdir -p ~/.docker
    - vault kv get -field=config secret/otc-credentials/docker  | base64 -d >> ~/.docker/config.json
    - ./gradlew :job:template_apply:jib
    - rm -rf ~/.docker/config.json

after_script:
  - echo "End CI"
